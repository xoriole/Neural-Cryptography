/*
 * NCryptPanel.java
 * Main Class for the GUI
 * Created on Mar 3, 2012, 11:56:26 PM
 */
package ncrypt;

import ncrypt.crypto.Crypto;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import neuralcryptography.net.InputVector;
import neuralcryptography.net.TPM;

/**
 *
 * @author phoenix
 */
public class NCryptPanel extends javax.swing.JFrame {

    /** Creates new form NCryptPanel */
    public NCryptPanel() {
        //initialize the gui made by Netbeans
        initComponents();

        //synchronization key status and key
        syncComplete = false;
        syncKey = "";



        plainTextField.setColumns(20);
        plainTextField.setRows(3);
        plainTextField.setWrapStyleWord(true);
        plainTextField.setLineWrap(true);

        encryptedTextField.setColumns(20);
        encryptedTextField.setRows(3);
        encryptedTextField.setWrapStyleWord(true);
        encryptedTextField.setLineWrap(true);

        decryptedTextField.setColumns(20);
        decryptedTextField.setRows(3);
        decryptedTextField.setWrapStyleWord(true);
        decryptedTextField.setLineWrap(true);

        keyField.setEditable(false);
        syncBar.setStringPainted(true);
        syncBar.setMaximum(100);
        syncBar.setMinimum(0);
        tpmImage1 = new JLabel(new ImageIcon("TreeParityMachine.jpg"));
        tpmImage2 = new JLabel(new ImageIcon("TreeParityMachine.jpg"));
        jPanel1.add(tpmImage1);
        jPanel2.add(tpmImage2);

        //set the icon for the application
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("logo16x16.png"));

        //set system look and feel to show as native application
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (Exception e) {
            //doesnot matter if exception occur. The default is java look and feel
        }

        //set initial status 
        statusLabel.setText("TPM is not initialized");

        //make this JFrame visible
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nField = new javax.swing.JTextField();
        kField = new javax.swing.JTextField();
        lField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        btnSync = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        keyField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainTextField = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        btnEncrypt = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        encryptedTextField = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        decryptedTextField = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        btnDecrypt = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        syncMessageLabel = new javax.swing.JLabel();
        syncBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        startMenuItem = new javax.swing.JMenuItem();
        syncMenuItem = new javax.swing.JMenuItem();
        resetMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        authorMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        jScrollPane4.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Neural Cryptography");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setName("MainFrame"); // NOI18N
        setResizable(false);

        jLabel1.setText("Parameters of Tree Parity Machine");

        jLabel2.setText("No of Input Neuron   (N)");

        jLabel3.setText("No of Hidden Neuron (K)");

        jLabel4.setText("Range of Weight        (L)");

        nField.setText("12");
        nField.setPreferredSize(new java.awt.Dimension(12, 20));
        nField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nFieldActionPerformed(evt);
            }
        });

        kField.setText("8");

        lField.setText("4");

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));

        jPanel2.setPreferredSize(new java.awt.Dimension(200, 200));

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnSync.setText("Sync");
        btnSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyncActionPerformed(evt);
            }
        });

        jLabel5.setText("Key");

        jLabel6.setText("Plain text");

        plainTextField.setColumns(20);
        plainTextField.setRows(5);
        jScrollPane1.setViewportView(plainTextField);

        jLabel7.setText("Encryption type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AES", "Serpent", "Twofish" }));

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        jLabel8.setText("Encrypted  text");

        encryptedTextField.setColumns(20);
        encryptedTextField.setEditable(false);
        encryptedTextField.setRows(5);
        jScrollPane2.setViewportView(encryptedTextField);

        jLabel9.setText("Decrypted text");

        decryptedTextField.setColumns(20);
        decryptedTextField.setEditable(false);
        decryptedTextField.setRows(5);
        jScrollPane3.setViewportView(decryptedTextField);

        jLabel10.setText("Decryption type");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AES", "Serpent", "Twofish" }));

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnReset.setText("reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jMenu1.setText("Options");

        startMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        startMenuItem.setText("Start ");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(startMenuItem);

        syncMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        syncMenuItem.setText("Sync");
        syncMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(syncMenuItem);

        resetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetMenuItem.setText("Reset");
        resetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(resetMenuItem);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Encrypt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Decrypt");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("About");

        authorMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        authorMenuItem.setText("Author");
        authorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(authorMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Exit");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSync, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(syncBar, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel6)
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel7)
                .addGap(24, 24, 24)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnEncrypt))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnDecrypt))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(syncMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(kField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSync, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(syncBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(keyField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel8))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10))
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel9))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syncMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //this method is called when Start button is clicked
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        this.init();
        btnStart.setEnabled(false);
    }//GEN-LAST:event_btnStartActionPerformed
    //this method is called when Sync button is clicked
    private void btnSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyncActionPerformed
        try {
            if (this.startSync()) {
                btnSync.setEnabled(false);
            }
        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSyncActionPerformed
    //this method is called when Encrypt button is clicked
    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        try {
            String plainText = plainTextField.getText();
            if (plainText.equals("")) {
                JOptionPane.showMessageDialog(this, "Type a text in Message field", "Empty Message", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            String cryptType = (String) jComboBox1.getSelectedItem();
            String encrypt = Crypto.encrypt(cryptType, plainText, syncKey);
            encryptedTextField.setText(encrypt);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "You need key.\n" + instruction, "No Key", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidKeyException ex) {
            JOptionPane.showMessageDialog(this, "Synchronization is not complete." + "\n" + instruction, "Key Error", JOptionPane.ERROR_MESSAGE);
        } catch (UnsupportedEncodingException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEncryptActionPerformed
    //this method is called when Decrypt button is clicked
    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        try {
            String encryptedString = encryptedTextField.getText();
            String cryptType = (String) jComboBox2.getSelectedItem();
            String decrypt = Crypto.decrypt(cryptType, encryptedString, syncKey);
            decryptedTextField.setText(decrypt);
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "You need key.\n" + instruction, "No Key", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidKeyException ex) {
            JOptionPane.showMessageDialog(this, "Synchronization is not complete." + "\n" + instruction, "Key Error", JOptionPane.ERROR_MESSAGE);
        } catch (UnsupportedEncodingException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDecryptActionPerformed
    //this method is called when Reset button is clicked
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        //reset tree parity machine
        m1 = null;
        m2 = null;

        //clear the panels to show tree parity machine images 
        jPanel1.removeAll();
        jPanel2.removeAll();
        jPanel1.add(tpmImage1);
        jPanel2.add(tpmImage2);

        //set button and input parameters field enabled
        nField.setEditable(true);
        kField.setEditable(true);
        lField.setEditable(true);
        btnStart.setEnabled(true);
        btnSync.setEnabled(true);

        //reset the text areas and text fields
        keyField.setText("");
        plainTextField.setText("");
        encryptedTextField.setText("");
        decryptedTextField.setText("");
        statusLabel.setText("Reset successful. Press start to initialize.");
        syncMessageLabel.setText("");

        //reset the sync key
        syncKey = null;
        syncComplete=false;
        
        //reset progress bar
        syncBar.setValue(0);

        //update the gui
        jPanel1.updateUI();
        jPanel1.show(true);
        jPanel2.updateUI();
        jPanel2.show(true);

    }//GEN-LAST:event_btnResetActionPerformed
    //this method is generated by netbeans. Not necessary for now
    private void nFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nFieldActionPerformed
    //this method is called when Start menu from Options is clicked
    private void startMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMenuItemActionPerformed
        btnStart.doClick();
    }//GEN-LAST:event_startMenuItemActionPerformed
    //this method is called when Sync menu from Options is clicked
    private void syncMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncMenuItemActionPerformed
        btnSync.doClick();
    }//GEN-LAST:event_syncMenuItemActionPerformed
    //this method is called when Reset menu from Options is clicked
    private void resetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetMenuItemActionPerformed
        btnReset.doClick();
    }//GEN-LAST:event_resetMenuItemActionPerformed
    //this method is called when Author menu from About is clicked
    private void authorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Author: Sandip Pandey\nRoll No: 065 BCT 538 \nPulchowk Campus\nInstitute of Engineering", "Author", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_authorMenuItemActionPerformed
    //this method is called when Encrypt menu from Options is clicked
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        btnEncrypt.doClick();
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    //this method is called when Decrypt menu from Options is clicked
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        btnDecrypt.doClick();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
    }//GEN-LAST:event_jMenu3ActionPerformed

    /**
     * @param no arguments
     * this method initializes the tree parity machine
     * this method should be called before synchronization
     */
    public void init() {
        //if TPM are already initialized then simply return
        if (m1 != null && m2 != null && !reset) {
            statusLabel.setText("TPM already initialized. Press Sync to synchronize the network");
            return;
        }

        try {
            //get the input parameters
            String n = nField.getText().trim();
            String k = kField.getText().trim();
            String l = lField.getText().trim();

            //check for validity of parameters
            if ((n.length() > 0) && (k.length() > 0) && (l.length() > 0)) {
                N = Integer.parseInt(n);
                K = Integer.parseInt(k);
                L = Integer.parseInt(l);

                //initialize the two TPM
                m1 = new TPM(N, K, L);
                m2 = new TPM(N, K, L);

                //set random initial weights
                m1.randomize();
                m2.randomize();

                //initialixe the Input vector and generate random vector
                input = new InputVector();
                input.setRandom(K, N);

                //disable the input parameters fields
                nField.setEditable(false);
                kField.setEditable(false);
                lField.setEditable(false);


                //initialize the weight tables. Table to display the weight of TPM
                weightTable1 = new JTable(new WeightTable(K, N));
                weightTable2 = new JTable(new WeightTable(K, N));
                //set the size for weight table
                weightTable1.setPreferredScrollableViewportSize(new Dimension(K * 20, N * 20));
                weightTable2.setPreferredScrollableViewportSize(new Dimension(K * 20, N * 20));
                //cover all available space
                weightTable1.setFillsViewportHeight(true);
                weightTable2.setFillsViewportHeight(true);
                //set the weight table elements
                for (int ii = 0; ii < K; ii++) {
                    for (int jj = 0; jj < N; jj++) {
                        weightTable1.setValueAt(m1.getWeight(ii * N + jj), ii, jj);
                    }
                }
                for (int ii = 0; ii < K; ii++) {
                    for (int jj = 0; jj < N; jj++) {
                        weightTable2.setValueAt(m2.getWeight(ii * N + jj), ii, jj);
                    }
                }

                //Create the scroll pane and add the weightTable1 to it.
                scrollPane1 = new JScrollPane(weightTable1);
                scrollPane2 = new JScrollPane(weightTable2);
                //clear the jpanels
                jPanel1.removeAll();
                jPanel2.removeAll();
                //Add the scroll pane to this panel.
                jPanel1.add(scrollPane1);
                jPanel2.add(scrollPane2);
                //update the gui
                jPanel1.updateUI();
                jPanel1.show(true);
                jPanel2.updateUI();
                jPanel2.show(true);

                //set the status 
                reset = false;
                statusLabel.setText("TPM initialized. Press Sync to synchronize the network");
                this.setVisible(true);
            }
        } catch (Exception e) {
            //display the exception on message box
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error in input parameters", JOptionPane.ERROR_MESSAGE);
        }
        this.update(this.getGraphics());
    }
    /**
     * @param no arguments
     * this method synchronizes the tree parity machines
     * this method should be called after TPM initialization
     */
    public boolean startSync() throws InterruptedException {
        //if TPM ate not initialize, synchronization is not necessary so return false
        if (m1 == null || m2 == null) {
            JOptionPane.showMessageDialog(this, "Network is not initialized.\n Press start to initialize", "Initialize Network first", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //set status 
        statusLabel.setText("sync started");
        
        //if synchronization is already complete, return true
        if (syncComplete) {
            JOptionPane.showMessageDialog(this, "The Tree Parity Machines are already synchronized. \nPress reset to reset the synchronization", "Already synchronized", JOptionPane.INFORMATION_MESSAGE);
            statusLabel.setText("Already in Sync");
            return true;
        }

        //get the sum of error on weights of two TPMs
        int maxSum = m1.getSum(m2);
        int sum = maxSum;

        //maximum allowed iterations for synchronization
        int max = (int) (L * L * L * L * N * K);
        for (int i = 0; i < max; i++) {
            //randomize the input vector
            input.setRandom(K, N);
            
            //calculate the output of both TPMs
            m1.calcOutput(input.getData());
            m2.calcOutput(input.getData());
            
            //if the output match the only update weights
            if (m1.getOutput() == m2.getOutput()) {
                m1.updateWeight(input.getData());
                m2.updateWeight(input.getData());
                
                //obtain the sum of error
                sum = m1.getSum(m2);

                //periodically update thw weight tables
                if ((i % 10 == 0) || (sum == 0)) {
                    for (int ii = 0; ii < K; ii++) {
                        for (int jj = 0; jj < N; jj++) {
                            weightTable1.setValueAt(m1.getWeight(ii * N + jj), ii, jj);
                        }
                    }
                    for (int ii = 0; ii < K; ii++) {
                        for (int jj = 0; jj < N; jj++) {
                            weightTable2.setValueAt(m2.getWeight(ii * N + jj), ii, jj);
                        }
                    }
                }
                
                //start progress bar only after the error is less than 100;
                if (sum < 100) {
                    syncBar.setValue(100 - sum);
                }
                
                //condition for synchronization complete
                if (sum == 0) {
                    //set the progressbar
                    syncBar.setValue(100);

                    //set the sync flag
                    syncComplete = true;
                    
                    //make valid 32bit key compatible for encryption algorithms
                    syncKey = Key.get32BitKey(m1.makeKey());
                    //set the key field
                    keyField.setText(syncKey);
                    //set sync status
                    syncMessageLabel.setText(" Synchronized in " + i + " iterations.");
                    statusLabel.setText("Sync complete");
                    //sync complete, return true
                    return true;
                }
                
                //update the gui
                jPanel1.updateUI();
                jPanel1.show(true);
                jPanel2.updateUI();
                jPanel2.show(true);
            }
        }
        
        //sync failed. set the status  and inform the user through message box
        statusLabel.setText("Sync Failed | Try Again");
        JOptionPane.showMessageDialog(this, "Synchronization failed. Try again\n Press Sync button again", "Failed", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem authorMenuItem;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnSync;
    private javax.swing.JTextArea decryptedTextField;
    private javax.swing.JTextArea encryptedTextField;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField kField;
    private javax.swing.JTextField keyField;
    private javax.swing.JTextField lField;
    private javax.swing.JTextField nField;
    private javax.swing.JTextArea plainTextField;
    private javax.swing.JMenuItem resetMenuItem;
    private javax.swing.JMenuItem startMenuItem;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JProgressBar syncBar;
    private javax.swing.JMenuItem syncMenuItem;
    private javax.swing.JLabel syncMessageLabel;
    // End of variables declaration//GEN-END:variables
    /*manually added field variable starts*/
    private boolean syncComplete;
    private String syncKey;
    private int N, K, L;
    private TPM m1, m2;
    private InputVector input;
    private boolean reset = true;
    private JTable weightTable1;
    private JTable weightTable2;
    private JScrollPane scrollPane1;
    private JScrollPane scrollPane2;
    private JLabel tpmImage1;
    private JLabel tpmImage2;
    private String instruction = "Follow one of following options.\n2.  Press Start and Sync OR\n2.  Press Sync ";
    /* manually added field variables ends*/
}
